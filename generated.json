{
  "states": [
    {
      "elem": "Curve",
      "func": "Setgauge",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Value",
          "type": "double?",
          "desc": "軌間 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Value"
      ],
      "elem_lower": "curve",
      "func_lower": "setgauge",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Setgauge(1.0);"
        }
      ]
    },
    {
      "elem": "Gauge",
      "func": "Set",
      "deprecated": true,
      "inheritance": "CurveSetgauge",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Value",
          "type": "double?",
          "desc": "軌間 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Value"
      ],
      "elem_lower": "gauge",
      "func_lower": "set",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gauge.Set(1.0);"
        },
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gauge.Set(1.0);"
        },
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Gauge.Set(1.0);"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Gauge",
      "deprecated": true,
      "inheritance": "CurveSetgauge",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Value",
          "type": "double?",
          "desc": "軌間 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Value"
      ],
      "elem_lower": "curve",
      "func_lower": "gauge",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Gauge(1.0);"
        },
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Gauge(1.0);"
        },
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Curve.Gauge(1.0);"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Setcenter",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "X",
          "type": "double?",
          "desc": "回転中心の x 座標 [m] (正: 曲線の内側, 負: 曲線の外側)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "X"
      ],
      "elem_lower": "curve",
      "func_lower": "setcenter",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "回転中心の x 座標 [m] (正: 曲線の内側, 負: 曲線の外側)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Setcenter(1.0);"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Setfunction",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Id",
          "type": "double?",
          "desc": "関数番号 (0: サイン半波長逓減, 1: 直線逓減)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Id"
      ],
      "elem_lower": "curve",
      "func_lower": "setfunction",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Id",
              "type": "double?",
              "desc": "関数番号 (0: サイン半波長逓減, 1: 直線逓減)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Setfunction(1.0);"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Begintransition",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "curve",
      "func_lower": "begintransition",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Begintransition();"
        },
        {
          "args": [],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Begintransition();"
        },
        {
          "args": [],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Curve.Begintransition();"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Begin",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Radius",
          "type": "double?",
          "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Cant",
          "type": "double?",
          "desc": "カント [m]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Radius",
        "Radius,Cant"
      ],
      "elem_lower": "curve",
      "func_lower": "begin",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Begin(1.0);"
        },
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Begin(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Begincircular",
      "deprecated": true,
      "inheritance": "CurveBegin",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Radius",
          "type": "double?",
          "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Cant",
          "type": "double?",
          "desc": "カント [m]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Radius,Cant"
      ],
      "elem_lower": "curve",
      "func_lower": "begincircular",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Begincircular(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Begincircular(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Curve.Begincircular(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "End",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "curve",
      "func_lower": "end",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.End();"
        },
        {
          "args": [],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.End();"
        },
        {
          "args": [],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Curve.End();"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Interpolate",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Radius",
          "type": "double?",
          "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線, 0: 直線)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Cant",
          "type": "double?",
          "desc": "カント [m]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "",
        "Radius",
        "Radius,Cant"
      ],
      "elem_lower": "curve",
      "func_lower": "interpolate",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Interpolate();"
        },
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線, 0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Interpolate(1.0);"
        },
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線, 0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Interpolate(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Curve",
      "func": "Change",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Radius",
          "type": "double?",
          "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線, 0: 直線)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Radius"
      ],
      "elem_lower": "curve",
      "func_lower": "change",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線, 0: 直線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Curve.Change(1.0);"
        }
      ]
    },
    {
      "elem": "Gradient",
      "func": "Begintransition",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [],
      "argPatterns": [
        ""
      ],
      "elem_lower": "gradient",
      "func_lower": "begintransition",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.Begintransition();"
        },
        {
          "args": [],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.Begintransition();"
        },
        {
          "args": [],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Gradient.Begintransition();"
        }
      ]
    },
    {
      "elem": "Gradient",
      "func": "Begin",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Gradient",
          "type": "double?",
          "desc": "勾配 [‰]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Gradient"
      ],
      "elem_lower": "gradient",
      "func_lower": "begin",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Gradient",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.Begin(1.0);"
        }
      ]
    },
    {
      "elem": "Gradient",
      "func": "Beginconst",
      "deprecated": true,
      "inheritance": "GradientBegin",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Gradient",
          "type": "double?",
          "desc": "勾配 [‰]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Gradient"
      ],
      "elem_lower": "gradient",
      "func_lower": "beginconst",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Gradient",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.Beginconst(1.0);"
        },
        {
          "args": [
            {
              "name": "Gradient",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.Beginconst(1.0);"
        },
        {
          "args": [
            {
              "name": "Gradient",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Gradient.Beginconst(1.0);"
        }
      ]
    },
    {
      "elem": "Gradient",
      "func": "End",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "gradient",
      "func_lower": "end",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.End();"
        },
        {
          "args": [],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.End();"
        },
        {
          "args": [],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Gradient.End();"
        }
      ]
    },
    {
      "elem": "Gradient",
      "func": "Interpolate",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Gradient",
          "type": "double?",
          "desc": "勾配 [‰]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "",
        "Gradient"
      ],
      "elem_lower": "gradient",
      "func_lower": "interpolate",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.Interpolate();"
        },
        {
          "args": [
            {
              "name": "Gradient",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Gradient.Interpolate(1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "X",
      "key": "TrackKey",
      "func": "Interpolate",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "X",
          "type": "double?",
          "desc": "自軌道からの x 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Radius",
          "type": "double?",
          "desc": "現在の距離程以降の自軌道との平面曲線相対半径 [m] (0: 直線)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "",
        "X",
        "X,Radius"
      ],
      "elem_lower": "track",
      "sub_elem_lower": "x",
      "func_lower": "interpolate",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].X.Interpolate();"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].X.Interpolate(1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Radius",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との平面曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].X.Interpolate(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Y",
      "key": "TrackKey",
      "func": "Interpolate",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Y",
          "type": "double?",
          "desc": "自軌道からの y 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Radius",
          "type": "double?",
          "desc": "現在の距離程以降の自軌道との縦曲線相対半径 [m] (0: 直線)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "",
        "Y",
        "Y,Radius"
      ],
      "elem_lower": "track",
      "sub_elem_lower": "y",
      "func_lower": "interpolate",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Y.Interpolate();"
        },
        {
          "args": [
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Y.Interpolate(1.0);"
        },
        {
          "args": [
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Radius",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との縦曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Y.Interpolate(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "key": "TrackKey",
      "func": "Position",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "X",
          "type": "double?",
          "desc": "自軌道からの x 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Y",
          "type": "double?",
          "desc": "自軌道からの y 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RadiusH",
          "type": "double?",
          "desc": "現在の距離程以降の自軌道との平面曲線相対半径 [m] (0: 直線)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RadiusV",
          "type": "double?",
          "desc": "現在の距離程以降の自軌道との縦曲線相対半径 [m] (0: 直線)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "X,Y",
        "X,Y,RadiusH",
        "Y,Y,RadiusV"
      ],
      "elem_lower": "track",
      "func_lower": "position",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RadiusH",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との平面曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RadiusV",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との縦曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RadiusH",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との平面曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RadiusV",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との縦曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "自軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RadiusH",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との平面曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "自軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RadiusV",
              "type": "double?",
              "desc": "現在の距離程以降の自軌道との縦曲線相対半径 [m] (0: 直線)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Track['TrackKey'].Position(1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Cant",
      "key": "TrackKey",
      "func": "Setgauge",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Gauge",
          "type": "double?",
          "desc": "軌間 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Gauge"
      ],
      "elem_lower": "track",
      "sub_elem_lower": "cant",
      "func_lower": "setgauge",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Gauge",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.Setgauge(1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "key": "TrackKey",
      "func": "Gauge",
      "deprecated": true,
      "inheritance": "TrackCantSetgauge",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Gauge",
          "type": "double?",
          "desc": "軌間 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Gauge"
      ],
      "elem_lower": "track",
      "func_lower": "gauge",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Gauge",
              "type": "double?",
              "desc": "軌間 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Gauge(1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Cant",
      "key": "TrackKey",
      "func": "Setcenter",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "X",
          "type": "double?",
          "desc": "回転中心の x 座標 [m] (正: 曲線の内側, 負: 曲線の外側)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "X"
      ],
      "elem_lower": "track",
      "sub_elem_lower": "cant",
      "func_lower": "setcenter",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "回転中心の x 座標 [m] (正: 曲線の内側, 負: 曲線の外側)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.Setcenter(1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Cant",
      "key": "TrackKey",
      "func": "Setfunction",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Id",
          "type": "double?",
          "desc": "関数番号 (0: サイン半波長逓減, 1: 直線逓減)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Id"
      ],
      "elem_lower": "track",
      "sub_elem_lower": "cant",
      "func_lower": "setfunction",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Id",
              "type": "double?",
              "desc": "関数番号 (0: サイン半波長逓減, 1: 直線逓減)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.Setfunction(1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Cant",
      "key": "TrackKey",
      "func": "Begintransition",
      "versions": [
        "2.02"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "track",
      "sub_elem_lower": "cant",
      "func_lower": "begintransition",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.Begintransition();"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Cant",
      "key": "TrackKey",
      "func": "Begin",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Cant",
          "type": "double?",
          "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Cant"
      ],
      "elem_lower": "track",
      "sub_elem_lower": "cant",
      "func_lower": "begin",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.Begin(1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Cant",
      "key": "TrackKey",
      "func": "End",
      "versions": [
        "2.02"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "track",
      "sub_elem_lower": "cant",
      "func_lower": "end",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.End();"
        }
      ]
    },
    {
      "elem": "Track",
      "sub_elem": "Cant",
      "key": "TrackKey",
      "func": "Interpolate",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Cant",
          "type": "double?",
          "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "",
        "Cant"
      ],
      "elem_lower": "track",
      "sub_elem_lower": "cant",
      "func_lower": "interpolate",
      "syntax1": false,
      "syntax2": false,
      "syntax3": true,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.Interpolate();"
        },
        {
          "args": [
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant.Interpolate(1.0);"
        }
      ]
    },
    {
      "elem": "Track",
      "key": "TrackKey",
      "func": "Cant",
      "deprecated": true,
      "inheritance": "TrackCantInterpolate",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Cant",
          "type": "double?",
          "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Cant"
      ],
      "elem_lower": "track",
      "func_lower": "cant",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant(1.0);"
        },
        {
          "args": [
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Track['TrackKey'].Cant(1.0);"
        },
        {
          "args": [
            {
              "name": "Cant",
              "type": "double?",
              "desc": "カント [m] (正: 右に傾ける, 負: 左に傾ける)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Track['TrackKey'].Cant(1.0);"
        }
      ]
    },
    {
      "elem": "Structure",
      "func": "Load",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "FilePath",
          "type": "string",
          "desc": "このファイルからストラクチャーリストファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        }
      ],
      "argPatterns": [
        "FilePath"
      ],
      "elem_lower": "structure",
      "func_lower": "load",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからストラクチャーリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからストラクチャーリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからストラクチャーリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Structure.Load('string_test_value');"
        }
      ]
    },
    {
      "elem": "Structure",
      "key": "StructureKey",
      "func": "Put",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "配置先の軌道名 (0: 自軌道)",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "X",
          "type": "double?",
          "desc": "軌道からの x 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Y",
          "type": "double?",
          "desc": "軌道からの y 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Z",
          "type": "double?",
          "desc": "軌道からの z 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RX",
          "type": "double?",
          "desc": "軌道に対する x 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RY",
          "type": "double?",
          "desc": "軌道に対する y 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RZ",
          "type": "double?",
          "desc": "軌道に対する z 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Tilt",
          "type": "double?",
          "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Span",
          "type": "double?",
          "desc": "曲線における弦の長さ [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "TrackKey,X,Y,Z,RX,RY,RZ,Tilt,Span"
      ],
      "elem_lower": "structure",
      "func_lower": "put",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Put('string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Put('string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Structure['StructureKey'].Put('string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Structure",
      "key": "StructureKey",
      "func": "Put0",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "配置先の軌道名 (0: 自軌道)",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Tilt",
          "type": "double?",
          "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Span",
          "type": "double?",
          "desc": "曲線における弦の長さ [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "TrackKey,Tilt,Span"
      ],
      "elem_lower": "structure",
      "func_lower": "put0",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Put0('string_test_value',1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Put0('string_test_value',1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Structure['StructureKey'].Put0('string_test_value',1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Structure",
      "key": "StructureKey",
      "func": "Putbetween",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "TrackKey1",
          "type": "string",
          "desc": "一方の軌道の軌道名 (0: 自軌道)",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "TrackKey2",
          "type": "string",
          "desc": "他方の軌道の軌道名",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Flag",
          "type": "double?",
          "desc": "変形方向 (0: x および y 方向に変形, 1: x 方向のみに変形)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "TrackKey1,TrackKey2",
        "TrackKey1,TrackKey2,Flag"
      ],
      "elem_lower": "structure",
      "func_lower": "putbetween",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "TrackKey1",
              "type": "string",
              "desc": "一方の軌道の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey2",
              "type": "string",
              "desc": "他方の軌道の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Putbetween('string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrackKey1",
              "type": "string",
              "desc": "一方の軌道の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey2",
              "type": "string",
              "desc": "他方の軌道の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Flag",
              "type": "double?",
              "desc": "変形方向 (0: x および y 方向に変形, 1: x 方向のみに変形)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Putbetween('string_test_value','string_test_value',1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey1",
              "type": "string",
              "desc": "一方の軌道の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey2",
              "type": "string",
              "desc": "他方の軌道の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Putbetween('string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrackKey1",
              "type": "string",
              "desc": "一方の軌道の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey2",
              "type": "string",
              "desc": "他方の軌道の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Flag",
              "type": "double?",
              "desc": "変形方向 (0: x および y 方向に変形, 1: x 方向のみに変形)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Structure['StructureKey'].Putbetween('string_test_value','string_test_value',1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey1",
              "type": "string",
              "desc": "一方の軌道の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey2",
              "type": "string",
              "desc": "他方の軌道の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Structure['StructureKey'].Putbetween('string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrackKey1",
              "type": "string",
              "desc": "一方の軌道の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey2",
              "type": "string",
              "desc": "他方の軌道の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Flag",
              "type": "double?",
              "desc": "変形方向 (0: x および y 方向に変形, 1: x 方向のみに変形)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Structure['StructureKey'].Putbetween('string_test_value','string_test_value',1.0);"
        }
      ]
    },
    {
      "elem": "Repeater",
      "key": "RepeaterKey",
      "func": "Begin",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "配置先の軌道名 (0: 自軌道)",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "X",
          "type": "double?",
          "desc": "軌道からの x 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Y",
          "type": "double?",
          "desc": "軌道からの y 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Z",
          "type": "double?",
          "desc": "軌道からの z 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RX",
          "type": "double?",
          "desc": "軌道に対する x 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RY",
          "type": "double?",
          "desc": "軌道に対する y 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RZ",
          "type": "double?",
          "desc": "軌道に対する z 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Tilt",
          "type": "double?",
          "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Span",
          "type": "double?",
          "desc": "曲線における弦の長さ [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Interval",
          "type": "double?",
          "desc": "配置間隔 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "StructureKey",
          "type": "list",
          "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
          "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
          "opt": false,
          "last": true,
          "is_list": true,
          "inner_type": "string",
          "inner_arguments": [
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ]
        }
      ],
      "argPatterns": [
        "TrackKey,X,Y,Z,RX,RY,RZ,Tilt,Span,Interval,StructureKey"
      ],
      "elem_lower": "repeater",
      "func_lower": "begin",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Interval",
              "type": "double?",
              "desc": "配置間隔 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StructureKey",
              "type": "list",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "string",
              "inner_arguments": [
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                }
              ]
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Repeater['RepeaterKey'].Begin('string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Interval",
              "type": "double?",
              "desc": "配置間隔 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StructureKey",
              "type": "list",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "string",
              "inner_arguments": [
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                }
              ]
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Repeater['RepeaterKey'].Begin('string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Interval",
              "type": "double?",
              "desc": "配置間隔 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StructureKey",
              "type": "list",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "string",
              "inner_arguments": [
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                }
              ]
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Repeater['RepeaterKey'].Begin('string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value');"
        }
      ]
    },
    {
      "elem": "Repeater",
      "key": "RepeaterKey",
      "func": "Begin0",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "配置先の軌道名 (0: 自軌道)",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Tilt",
          "type": "double?",
          "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Span",
          "type": "double?",
          "desc": "曲線における弦の長さ [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Interval",
          "type": "double?",
          "desc": "配置間隔 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "StructureKey",
          "type": "list",
          "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
          "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
          "opt": false,
          "last": true,
          "is_list": true,
          "inner_type": "string",
          "inner_arguments": [
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "StructureKey",
              "type": "String",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ]
        }
      ],
      "argPatterns": [
        "TrackKey,Tilt,Span,Interval,StructureKey"
      ],
      "elem_lower": "repeater",
      "func_lower": "begin0",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Interval",
              "type": "double?",
              "desc": "配置間隔 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StructureKey",
              "type": "list",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "string",
              "inner_arguments": [
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                }
              ]
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Repeater['RepeaterKey'].Begin0('string_test_value',1.0,1.0,1.0,'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Interval",
              "type": "double?",
              "desc": "配置間隔 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StructureKey",
              "type": "list",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "string",
              "inner_arguments": [
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                }
              ]
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Repeater['RepeaterKey'].Begin0('string_test_value',1.0,1.0,1.0,'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名 (0: 自軌道)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Interval",
              "type": "double?",
              "desc": "配置間隔 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StructureKey",
              "type": "list",
              "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
              "syntax_for_test": "'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value'",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "string",
              "inner_arguments": [
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                },
                {
                  "name": "StructureKey",
                  "type": "String",
                  "desc": "ストラクチャー名 (ストラクチャーリストファイルで定義した文字列）",
                  "syntax_for_test": "'string_test_value'",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "'string_test_value'",
                  "test_value_map_grammar_non_quote": "string_test_value",
                  "test_value_csharp": "\"string_test_value\""
                }
              ]
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Repeater['RepeaterKey'].Begin0('string_test_value',1.0,1.0,1.0,'string_test_value','string_test_value','string_test_value','string_test_value','string_test_value');"
        }
      ]
    },
    {
      "elem": "Repeater",
      "key": "RepeaterKey",
      "func": "End",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "repeater",
      "func_lower": "end",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Repeater['RepeaterKey'].End();"
        },
        {
          "args": [],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Repeater['RepeaterKey'].End();"
        },
        {
          "args": [],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Repeater['RepeaterKey'].End();"
        }
      ]
    },
    {
      "elem": "Background",
      "func": "Change",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "StructureKey",
          "type": "string",
          "desc": "ストラクチャー名",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        }
      ],
      "argPatterns": [
        "StructureKey"
      ],
      "elem_lower": "background",
      "func_lower": "change",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "StructureKey",
              "type": "string",
              "desc": "ストラクチャー名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Background.Change('string_test_value');"
        },
        {
          "args": [
            {
              "name": "StructureKey",
              "type": "string",
              "desc": "ストラクチャー名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Background.Change('string_test_value');"
        },
        {
          "args": [
            {
              "name": "StructureKey",
              "type": "string",
              "desc": "ストラクチャー名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Background.Change('string_test_value');"
        }
      ]
    },
    {
      "elem": "Station",
      "func": "Load",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "FilePath",
          "type": "string",
          "desc": "このファイルから停車場リストファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        }
      ],
      "argPatterns": [
        "FilePath"
      ],
      "elem_lower": "station",
      "func_lower": "load",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから停車場リストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Station.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから停車場リストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Station.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから停車場リストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Station.Load('string_test_value');"
        }
      ]
    },
    {
      "elem": "Station",
      "key": "StationKey",
      "func": "Put",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Door",
          "type": "double?",
          "desc": "開くドアの方向 (-1: 左, 1: 右)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Margin1",
          "type": "double?",
          "desc": "停止位置誤差の後方許容範囲 (負の値で設定)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Margin2",
          "type": "double?",
          "desc": "停止位置誤差の後方許容範囲",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Door,Margin1,Margin2"
      ],
      "elem_lower": "station",
      "func_lower": "put",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Door",
              "type": "double?",
              "desc": "開くドアの方向 (-1: 左, 1: 右)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Margin1",
              "type": "double?",
              "desc": "停止位置誤差の後方許容範囲 (負の値で設定)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Margin2",
              "type": "double?",
              "desc": "停止位置誤差の後方許容範囲",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Station['StationKey'].Put(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Door",
              "type": "double?",
              "desc": "開くドアの方向 (-1: 左, 1: 右)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Margin1",
              "type": "double?",
              "desc": "停止位置誤差の後方許容範囲 (負の値で設定)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Margin2",
              "type": "double?",
              "desc": "停止位置誤差の後方許容範囲",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Station['StationKey'].Put(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Door",
              "type": "double?",
              "desc": "開くドアの方向 (-1: 左, 1: 右)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Margin1",
              "type": "double?",
              "desc": "停止位置誤差の後方許容範囲 (負の値で設定)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Margin2",
              "type": "double?",
              "desc": "停止位置誤差の後方許容範囲",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Station['StationKey'].Put(1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Section",
      "func": "Begin",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Signal",
          "type": "list",
          "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
          "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
          "opt": false,
          "last": true,
          "is_list": true,
          "inner_type": "double?",
          "inner_arguments": [
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ]
        }
      ],
      "argPatterns": [
        "Signal"
      ],
      "elem_lower": "section",
      "func_lower": "begin",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Signal",
              "type": "list",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Section.Begin(1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Section",
      "func": "Beginnew",
      "deprecated": true,
      "inheritance": "SectionBegin",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Signal",
          "type": "list",
          "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
          "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
          "opt": false,
          "last": true,
          "is_list": true,
          "inner_type": "double?",
          "inner_arguments": [
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Signal",
              "type": "Double",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ]
        }
      ],
      "argPatterns": [
        "Signal"
      ],
      "elem_lower": "section",
      "func_lower": "beginnew",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Signal",
              "type": "list",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Section.Beginnew(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Signal",
              "type": "list",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Section.Beginnew(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Signal",
              "type": "list",
              "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "Signal",
                  "type": "Double",
                  "desc": "先行列車が n 閉そく先に存在する場合の信号インデックス（0: この閉塞）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Section.Beginnew(1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Section",
      "func": "Setspeedlimit",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "V",
          "type": "list",
          "desc": "走行速度 [km/h] （null: 許容速度なし）",
          "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
          "opt": false,
          "last": true,
          "is_list": true,
          "inner_type": "double?",
          "inner_arguments": [
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ]
        }
      ],
      "argPatterns": [
        "V"
      ],
      "elem_lower": "section",
      "func_lower": "setspeedlimit",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "V",
              "type": "list",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Section.Setspeedlimit(1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Signal",
      "func": "Speedlimit",
      "deprecated": true,
      "inheritance": "SectionSetspeedlimit",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "V",
          "type": "list",
          "desc": "走行速度 [km/h] （null: 許容速度なし）",
          "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
          "opt": false,
          "last": true,
          "is_list": true,
          "inner_type": "double?",
          "inner_arguments": [
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ]
        }
      ],
      "argPatterns": [
        "V"
      ],
      "elem_lower": "signal",
      "func_lower": "speedlimit",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "V",
              "type": "list",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal.Speedlimit(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "V",
              "type": "list",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal.Speedlimit(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "V",
              "type": "list",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Signal.Speedlimit(1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Speedlimit",
      "func": "Setsignal",
      "deprecated": true,
      "inheritance": "SectionSetspeedlimit",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "V",
          "type": "list",
          "desc": "走行速度 [km/h] （null: 許容速度なし）",
          "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
          "opt": false,
          "last": true,
          "is_list": true,
          "inner_type": "double?",
          "inner_arguments": [
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "V",
              "type": "Double",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ]
        }
      ],
      "argPatterns": [
        "V"
      ],
      "elem_lower": "speedlimit",
      "func_lower": "setsignal",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "V",
              "type": "list",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Speedlimit.Setsignal(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "V",
              "type": "list",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Speedlimit.Setsignal(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "V",
              "type": "list",
              "desc": "走行速度 [km/h] （null: 許容速度なし）",
              "syntax_for_test": "1.0,1.0,1.0,1.0,1.0",
              "opt": false,
              "last": true,
              "is_list": true,
              "inner_type": "double?",
              "inner_arguments": [
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": false,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": false,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                },
                {
                  "name": "V",
                  "type": "Double",
                  "desc": "走行速度 [km/h] （null: 許容速度なし）",
                  "syntax_for_test": "1.0",
                  "opt": true,
                  "last": true,
                  "test_value_map_grammar": "1.0",
                  "test_value_map_grammar_non_quote": "1.0",
                  "test_value_csharp": "1.0"
                }
              ]
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Speedlimit.Setsignal(1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Signal",
      "func": "Load",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "FilePath",
          "type": "string",
          "desc": "このファイルから信号現示リストファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        }
      ],
      "argPatterns": [
        "FilePath"
      ],
      "elem_lower": "signal",
      "func_lower": "load",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから信号現示リストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから信号現示リストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから信号現示リストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Signal.Load('string_test_value');"
        }
      ]
    },
    {
      "elem": "Signal",
      "key": "SignalAspectKey",
      "func": "Put",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Section",
          "type": "double?",
          "desc": "関連づける閉そくの相対インデックス",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "配置先の軌道名",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "X",
          "type": "double?",
          "desc": "軌道からの x 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Y",
          "type": "double?",
          "desc": "軌道からの y 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Z",
          "type": "double?",
          "desc": "軌道からの z 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RX",
          "type": "double?",
          "desc": "軌道に対する x 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RY",
          "type": "double?",
          "desc": "軌道に対する y 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "RZ",
          "type": "double?",
          "desc": "軌道に対する z 軸回りの角 [deg]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Tilt",
          "type": "double?",
          "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Span",
          "type": "double?",
          "desc": "曲線における弦の長さ [m]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Section,TrackKey,X,Y",
        "Section,TrackKey,X,Y,Z,RX,RY,RZ,Tilt,Span"
      ],
      "elem_lower": "signal",
      "func_lower": "put",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal['SignalAspectKey'].Put(1.0,'string_test_value',1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal['SignalAspectKey'].Put(1.0,'string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal['SignalAspectKey'].Put(1.0,'string_test_value',1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Signal['SignalAspectKey'].Put(1.0,'string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Signal['SignalAspectKey'].Put(1.0,'string_test_value',1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "配置先の軌道名",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Z",
              "type": "double?",
              "desc": "軌道からの z 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RX",
              "type": "double?",
              "desc": "軌道に対する x 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RY",
              "type": "double?",
              "desc": "軌道に対する y 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "RZ",
              "type": "double?",
              "desc": "軌道に対する z 軸回りの角 [deg]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Tilt",
              "type": "double?",
              "desc": "傾斜オプション (0: 常に水平, 1: 勾配に連動, 2: カントに連動, 3: 勾配とカントに連動)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Span",
              "type": "double?",
              "desc": "曲線における弦の長さ [m]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Signal['SignalAspectKey'].Put(1.0,'string_test_value',1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Beacon",
      "func": "Put",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Type",
          "type": "double?",
          "desc": "保安装置に送る地上子種別 (整数)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Section",
          "type": "double?",
          "desc": "関連づける閉そくの相対インデックス",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Senddata",
          "type": "double?",
          "desc": "保安装置に送る値 (整数)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Type,Section,SendData"
      ],
      "elem_lower": "beacon",
      "func_lower": "put",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Type",
              "type": "double?",
              "desc": "保安装置に送る地上子種別 (整数)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Senddata",
              "type": "double?",
              "desc": "保安装置に送る値 (整数)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Beacon.Put(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Type",
              "type": "double?",
              "desc": "保安装置に送る地上子種別 (整数)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Senddata",
              "type": "double?",
              "desc": "保安装置に送る値 (整数)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Beacon.Put(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Type",
              "type": "double?",
              "desc": "保安装置に送る地上子種別 (整数)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Section",
              "type": "double?",
              "desc": "関連づける閉そくの相対インデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Senddata",
              "type": "double?",
              "desc": "保安装置に送る値 (整数)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Beacon.Put(1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Speedlimit",
      "func": "Begin",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "V",
          "type": "double?",
          "desc": "走行速度 [km/h]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "V"
      ],
      "elem_lower": "speedlimit",
      "func_lower": "begin",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "V",
              "type": "double?",
              "desc": "走行速度 [km/h]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Speedlimit.Begin(1.0);"
        },
        {
          "args": [
            {
              "name": "V",
              "type": "double?",
              "desc": "走行速度 [km/h]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Speedlimit.Begin(1.0);"
        },
        {
          "args": [
            {
              "name": "V",
              "type": "double?",
              "desc": "走行速度 [km/h]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Speedlimit.Begin(1.0);"
        }
      ]
    },
    {
      "elem": "Speedlimit",
      "func": "End",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "speedlimit",
      "func_lower": "end",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Speedlimit.End();"
        },
        {
          "args": [],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Speedlimit.End();"
        },
        {
          "args": [],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Speedlimit.End();"
        }
      ]
    },
    {
      "elem": "Pretrain",
      "func": "Pass",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Time",
          "type": "string",
          "desc": "時刻を表す文字列 ('hh:mm:ss')",
          "syntax_for_test": "'string_test_value'",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Second",
          "type": "double?",
          "desc": "00:00:00 からの経過時間 [sec]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Time",
        "Second"
      ],
      "elem_lower": "pretrain",
      "func_lower": "pass",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Time",
              "type": "string",
              "desc": "時刻を表す文字列 ('hh:mm:ss')",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Pretrain.Pass('string_test_value');"
        },
        {
          "args": [
            {
              "name": "Second",
              "type": "double?",
              "desc": "00:00:00 からの経過時間 [sec]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Pretrain.Pass(1.0);"
        },
        {
          "args": [
            {
              "name": "Time",
              "type": "string",
              "desc": "時刻を表す文字列 ('hh:mm:ss')",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Pretrain.Pass('string_test_value');"
        },
        {
          "args": [
            {
              "name": "Second",
              "type": "double?",
              "desc": "00:00:00 からの経過時間 [sec]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Pretrain.Pass(1.0);"
        },
        {
          "args": [
            {
              "name": "Time",
              "type": "string",
              "desc": "時刻を表す文字列 ('hh:mm:ss')",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Pretrain.Pass('string_test_value');"
        },
        {
          "args": [
            {
              "name": "Second",
              "type": "double?",
              "desc": "00:00:00 からの経過時間 [sec]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Pretrain.Pass(1.0);"
        }
      ]
    },
    {
      "elem": "Light",
      "func": "Ambient",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Red",
          "type": "double?",
          "desc": "赤成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Green",
          "type": "double?",
          "desc": "緑成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Blue",
          "type": "double?",
          "desc": "青成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Red,Green,Blue"
      ],
      "elem_lower": "light",
      "func_lower": "ambient",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Light.Ambient(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Light.Ambient(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Light.Ambient(1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Light",
      "func": "Diffuse",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Red",
          "type": "double?",
          "desc": "赤成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Green",
          "type": "double?",
          "desc": "緑成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Blue",
          "type": "double?",
          "desc": "青成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Red,Green,Blue"
      ],
      "elem_lower": "light",
      "func_lower": "diffuse",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Light.Diffuse(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Light.Diffuse(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Light.Diffuse(1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Light",
      "func": "Direction",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Pitch",
          "type": "double?",
          "desc": "角度",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Yaw",
          "type": "double?",
          "desc": "回転角",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Pitch,Yaw"
      ],
      "elem_lower": "light",
      "func_lower": "direction",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Pitch",
              "type": "double?",
              "desc": "角度",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Yaw",
              "type": "double?",
              "desc": "回転角",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Light.Direction(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Pitch",
              "type": "double?",
              "desc": "角度",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Yaw",
              "type": "double?",
              "desc": "回転角",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Light.Direction(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Pitch",
              "type": "double?",
              "desc": "角度",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Yaw",
              "type": "double?",
              "desc": "回転角",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Light.Direction(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Fog",
      "func": "Interpolate",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Density",
          "type": "double?",
          "desc": "濃度",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Red",
          "type": "double?",
          "desc": "赤成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Green",
          "type": "double?",
          "desc": "緑成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Blue",
          "type": "double?",
          "desc": "青成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "",
        "Density",
        "Density,Red,Green,Blue"
      ],
      "elem_lower": "fog",
      "func_lower": "interpolate",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Fog.Interpolate();"
        },
        {
          "args": [
            {
              "name": "Density",
              "type": "double?",
              "desc": "濃度",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Fog.Interpolate(1.0);"
        },
        {
          "args": [
            {
              "name": "Density",
              "type": "double?",
              "desc": "濃度",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Fog.Interpolate(1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Fog",
      "func": "Set",
      "deprecated": true,
      "inheritance": "FogInterpolate",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Density",
          "type": "double?",
          "desc": "濃度",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Red",
          "type": "double?",
          "desc": "赤成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Green",
          "type": "double?",
          "desc": "緑成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Blue",
          "type": "double?",
          "desc": "青成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Density,Red,Green,Blue"
      ],
      "elem_lower": "fog",
      "func_lower": "set",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Density",
              "type": "double?",
              "desc": "濃度",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Fog.Set(1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Density",
              "type": "double?",
              "desc": "濃度",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Fog.Set(1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Density",
              "type": "double?",
              "desc": "濃度",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Fog.Set(1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Drawdistance",
      "func": "Change",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Value",
          "type": "double?",
          "desc": "距離 [m] (0: [設定] ウィンドウで設定される描画距離を適用)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Value"
      ],
      "elem_lower": "drawdistance",
      "func_lower": "change",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "距離 [m] (0: [設定] ウィンドウで設定される描画距離を適用)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Drawdistance.Change(1.0);"
        }
      ]
    },
    {
      "elem": "Cabilluminance",
      "func": "Interpolate",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "Value",
          "type": "double?",
          "desc": "昼間画像と夜間画像の混合比 (0: 夜間画像 ~ 1: 昼間画像)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "",
        "Value"
      ],
      "elem_lower": "cabilluminance",
      "func_lower": "interpolate",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Cabilluminance.Interpolate();"
        },
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "昼間画像と夜間画像の混合比 (0: 夜間画像 ~ 1: 昼間画像)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Cabilluminance.Interpolate(1.0);"
        }
      ]
    },
    {
      "elem": "Cabilluminance",
      "func": "Set",
      "deprecated": true,
      "inheritance": "CabilluminanceInterpolate",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Value",
          "type": "double?",
          "desc": "昼間画像と夜間画像の混合比 (0: 夜間画像 ~ 1: 昼間画像)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Value"
      ],
      "elem_lower": "cabilluminance",
      "func_lower": "set",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "昼間画像と夜間画像の混合比 (0: 夜間画像 ~ 1: 昼間画像)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Cabilluminance.Set(1.0);"
        },
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "昼間画像と夜間画像の混合比 (0: 夜間画像 ~ 1: 昼間画像)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Cabilluminance.Set(1.0);"
        },
        {
          "args": [
            {
              "name": "Value",
              "type": "double?",
              "desc": "昼間画像と夜間画像の混合比 (0: 夜間画像 ~ 1: 昼間画像)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Cabilluminance.Set(1.0);"
        }
      ]
    },
    {
      "elem": "Irregularity",
      "func": "Change",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "X",
          "type": "double?",
          "desc": "左右変位 (左と右のレールの通り変位の平均に相当) の標準偏差 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Y",
          "type": "double?",
          "desc": "上下変位 (左と右のレールの高低変位の平均に相当) の標準偏差 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "R",
          "type": "double?",
          "desc": "ロール変位 (水準変位を軌間で除した値に相当) の標準偏差 [rad]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "LX",
          "type": "double?",
          "desc": "左右変位の遮断波長 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "LY",
          "type": "double?",
          "desc": "上下変位の遮断波長 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "LR",
          "type": "double?",
          "desc": "ロール変位の遮断波長 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "X,Y,R,LX,LY,LR"
      ],
      "elem_lower": "irregularity",
      "func_lower": "change",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "左右変位 (左と右のレールの通り変位の平均に相当) の標準偏差 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "上下変位 (左と右のレールの高低変位の平均に相当) の標準偏差 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "R",
              "type": "double?",
              "desc": "ロール変位 (水準変位を軌間で除した値に相当) の標準偏差 [rad]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LX",
              "type": "double?",
              "desc": "左右変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LY",
              "type": "double?",
              "desc": "上下変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LR",
              "type": "double?",
              "desc": "ロール変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Irregularity.Change(1.0,1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "左右変位 (左と右のレールの通り変位の平均に相当) の標準偏差 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "上下変位 (左と右のレールの高低変位の平均に相当) の標準偏差 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "R",
              "type": "double?",
              "desc": "ロール変位 (水準変位を軌間で除した値に相当) の標準偏差 [rad]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LX",
              "type": "double?",
              "desc": "左右変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LY",
              "type": "double?",
              "desc": "上下変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LR",
              "type": "double?",
              "desc": "ロール変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Irregularity.Change(1.0,1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "左右変位 (左と右のレールの通り変位の平均に相当) の標準偏差 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "上下変位 (左と右のレールの高低変位の平均に相当) の標準偏差 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "R",
              "type": "double?",
              "desc": "ロール変位 (水準変位を軌間で除した値に相当) の標準偏差 [rad]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LX",
              "type": "double?",
              "desc": "左右変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LY",
              "type": "double?",
              "desc": "上下変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "LR",
              "type": "double?",
              "desc": "ロール変位の遮断波長 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Irregularity.Change(1.0,1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Adhesion",
      "func": "Change",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "A",
          "type": "double?",
          "desc": "走行速度 0 km/h における粘着係数",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "B",
          "type": "double?",
          "desc": "粘着係数の走行速度に対する変化を表す係数",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "C",
          "type": "double?",
          "desc": "粘着係数の走行速度に対する変化を表す係数",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "A",
        "A,B,C"
      ],
      "elem_lower": "adhesion",
      "func_lower": "change",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "A",
              "type": "double?",
              "desc": "走行速度 0 km/h における粘着係数",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Adhesion.Change(1.0);"
        },
        {
          "args": [
            {
              "name": "A",
              "type": "double?",
              "desc": "走行速度 0 km/h における粘着係数",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "B",
              "type": "double?",
              "desc": "粘着係数の走行速度に対する変化を表す係数",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "C",
              "type": "double?",
              "desc": "粘着係数の走行速度に対する変化を表す係数",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Adhesion.Change(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "A",
              "type": "double?",
              "desc": "走行速度 0 km/h における粘着係数",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Adhesion.Change(1.0);"
        },
        {
          "args": [
            {
              "name": "A",
              "type": "double?",
              "desc": "走行速度 0 km/h における粘着係数",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "B",
              "type": "double?",
              "desc": "粘着係数の走行速度に対する変化を表す係数",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "C",
              "type": "double?",
              "desc": "粘着係数の走行速度に対する変化を表す係数",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Adhesion.Change(1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "A",
              "type": "double?",
              "desc": "走行速度 0 km/h における粘着係数",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Adhesion.Change(1.0);"
        },
        {
          "args": [
            {
              "name": "A",
              "type": "double?",
              "desc": "走行速度 0 km/h における粘着係数",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "B",
              "type": "double?",
              "desc": "粘着係数の走行速度に対する変化を表す係数",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "C",
              "type": "double?",
              "desc": "粘着係数の走行速度に対する変化を表す係数",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Adhesion.Change(1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Sound",
      "func": "Load",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "FilePath",
          "type": "string",
          "desc": "このファイルからサウンドリストファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        }
      ],
      "argPatterns": [
        "FilePath"
      ],
      "elem_lower": "sound",
      "func_lower": "load",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからサウンドリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからサウンドリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからサウンドリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Sound.Load('string_test_value');"
        }
      ]
    },
    {
      "elem": "Sound",
      "key": "SoundKey",
      "func": "Play",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [],
      "argPatterns": [],
      "elem_lower": "sound",
      "func_lower": "play",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": true,
      "argPattern": [
        {
          "args": [],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound['SoundKey'].Play();"
        },
        {
          "args": [],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound['SoundKey'].Play();"
        },
        {
          "args": [],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Sound['SoundKey'].Play();"
        }
      ]
    },
    {
      "elem": "Sound3d",
      "func": "Load",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "FilePath",
          "type": "string",
          "desc": "このファイルからサウンドリストファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        }
      ],
      "argPatterns": [
        "FilePath"
      ],
      "elem_lower": "sound3d",
      "func_lower": "load",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからサウンドリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound3d.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからサウンドリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound3d.Load('string_test_value');"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルからサウンドリストファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Sound3d.Load('string_test_value');"
        }
      ]
    },
    {
      "elem": "Sound3d",
      "key": "SoundKey",
      "func": "Put",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "X",
          "type": "double?",
          "desc": "軌道からの x 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Y",
          "type": "double?",
          "desc": "軌道からの y 座標 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "X,Y"
      ],
      "elem_lower": "sound3d",
      "func_lower": "put",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound3d['SoundKey'].Put(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Sound3d['SoundKey'].Put(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "X",
              "type": "double?",
              "desc": "軌道からの x 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Y",
              "type": "double?",
              "desc": "軌道からの y 座標 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Sound3d['SoundKey'].Put(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Rollingnoise",
      "func": "Change",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Index",
          "type": "double?",
          "desc": "車両サウンドファイルの [Run] セクションで定義したインデックス",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Index"
      ],
      "elem_lower": "rollingnoise",
      "func_lower": "change",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Run] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Rollingnoise.Change(1.0);"
        },
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Run] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Rollingnoise.Change(1.0);"
        },
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Run] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Rollingnoise.Change(1.0);"
        }
      ]
    },
    {
      "elem": "Flangenoise",
      "func": "Change",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Index",
          "type": "double?",
          "desc": "車両サウンドファイルの [Flange] セクションで定義したインデックス",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Index"
      ],
      "elem_lower": "flangenoise",
      "func_lower": "change",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Flange] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Flangenoise.Change(1.0);"
        },
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Flange] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Flangenoise.Change(1.0);"
        },
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Flange] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Flangenoise.Change(1.0);"
        }
      ]
    },
    {
      "elem": "Jointnoise",
      "func": "Play",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Index",
          "type": "double?",
          "desc": "車両サウンドファイルの [Joint] セクションで定義したインデックス",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Index"
      ],
      "elem_lower": "jointnoise",
      "func_lower": "play",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Joint] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Jointnoise.Play(1.0);"
        },
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Joint] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Jointnoise.Play(1.0);"
        },
        {
          "args": [
            {
              "name": "Index",
              "type": "double?",
              "desc": "車両サウンドファイルの [Joint] セクションで定義したインデックス",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Jointnoise.Play(1.0);"
        }
      ]
    },
    {
      "elem": "Train",
      "func": "Add",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "TrainKey",
          "type": "string",
          "desc": "他列車名 (任意の文字列)",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "FilePath",
          "type": "string",
          "desc": "このファイルから他列車ファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "走行する軌道",
          "syntax_for_test": "'string_test_value'",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Direction",
          "type": "double?",
          "desc": "進行方向 (-1: 対向, 1: 並走)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "TrainKey,FilePath",
        "TrainKey,FilePath,TrackKey,Direction"
      ],
      "elem_lower": "train",
      "func_lower": "add",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "TrainKey",
              "type": "string",
              "desc": "他列車名 (任意の文字列)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから他列車ファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train.Add('string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrainKey",
              "type": "string",
              "desc": "他列車名 (任意の文字列)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから他列車ファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "走行する軌道",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Direction",
              "type": "double?",
              "desc": "進行方向 (-1: 対向, 1: 並走)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train.Add('string_test_value','string_test_value','string_test_value',1.0);"
        },
        {
          "args": [
            {
              "name": "TrainKey",
              "type": "string",
              "desc": "他列車名 (任意の文字列)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから他列車ファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train.Add('string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrainKey",
              "type": "string",
              "desc": "他列車名 (任意の文字列)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから他列車ファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "走行する軌道",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Direction",
              "type": "double?",
              "desc": "進行方向 (-1: 対向, 1: 並走)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train.Add('string_test_value','string_test_value','string_test_value',1.0);"
        },
        {
          "args": [
            {
              "name": "TrainKey",
              "type": "string",
              "desc": "他列車名 (任意の文字列)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから他列車ファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Train.Add('string_test_value','string_test_value');"
        },
        {
          "args": [
            {
              "name": "TrainKey",
              "type": "string",
              "desc": "他列車名 (任意の文字列)",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから他列車ファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "走行する軌道",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Direction",
              "type": "double?",
              "desc": "進行方向 (-1: 対向, 1: 並走)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Train.Add('string_test_value','string_test_value','string_test_value',1.0);"
        }
      ]
    },
    {
      "elem": "Train",
      "key": "TrainKey",
      "func": "Load",
      "versions": [
        "2.02"
      ],
      "args": [
        {
          "name": "FilePath",
          "type": "string",
          "desc": "このファイルから他列車ファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "走行する軌道",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Direction",
          "type": "double?",
          "desc": "進行方向 (-1: 対向, 1: 並走)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "FilePath,TrackKey,Direction"
      ],
      "elem_lower": "train",
      "func_lower": "load",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "このファイルから他列車ファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "走行する軌道",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Direction",
              "type": "double?",
              "desc": "進行方向 (-1: 対向, 1: 並走)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Load('string_test_value','string_test_value',1.0);"
        }
      ]
    },
    {
      "elem": "Train",
      "key": "TrainKey",
      "func": "Enable",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Time",
          "type": "string",
          "desc": "時刻を表す文字列 ('hh:mm:ss')",
          "syntax_for_test": "'string_test_value'",
          "opt": true,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Second",
          "type": "double?",
          "desc": "00:00:00 からの経過時間 [sec]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Time",
        "Second"
      ],
      "elem_lower": "train",
      "func_lower": "enable",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Time",
              "type": "string",
              "desc": "時刻を表す文字列 ('hh:mm:ss')",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Enable('string_test_value');"
        },
        {
          "args": [
            {
              "name": "Second",
              "type": "double?",
              "desc": "00:00:00 からの経過時間 [sec]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Enable(1.0);"
        },
        {
          "args": [
            {
              "name": "Time",
              "type": "string",
              "desc": "時刻を表す文字列 ('hh:mm:ss')",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Enable('string_test_value');"
        },
        {
          "args": [
            {
              "name": "Second",
              "type": "double?",
              "desc": "00:00:00 からの経過時間 [sec]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Enable(1.0);"
        },
        {
          "args": [
            {
              "name": "Time",
              "type": "string",
              "desc": "時刻を表す文字列 ('hh:mm:ss')",
              "syntax_for_test": "'string_test_value'",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Train['TrainKey'].Enable('string_test_value');"
        },
        {
          "args": [
            {
              "name": "Second",
              "type": "double?",
              "desc": "00:00:00 からの経過時間 [sec]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Train['TrainKey'].Enable(1.0);"
        }
      ]
    },
    {
      "elem": "Train",
      "key": "TrainKey",
      "func": "Stop",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Decelerate",
          "type": "double?",
          "desc": "減速度 [km/h/s]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "StopTime",
          "type": "double?",
          "desc": "停車時間 [s]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Accelerate",
          "type": "double?",
          "desc": "加速度 [km/h/s]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Speed",
          "type": "double?",
          "desc": "加速後の走行速度 [km/h]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Decelerate,StopTime,Accelerate,Speed"
      ],
      "elem_lower": "train",
      "func_lower": "stop",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Decelerate",
              "type": "double?",
              "desc": "減速度 [km/h/s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StopTime",
              "type": "double?",
              "desc": "停車時間 [s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Accelerate",
              "type": "double?",
              "desc": "加速度 [km/h/s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Speed",
              "type": "double?",
              "desc": "加速後の走行速度 [km/h]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Stop(1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Decelerate",
              "type": "double?",
              "desc": "減速度 [km/h/s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StopTime",
              "type": "double?",
              "desc": "停車時間 [s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Accelerate",
              "type": "double?",
              "desc": "加速度 [km/h/s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Speed",
              "type": "double?",
              "desc": "加速後の走行速度 [km/h]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Stop(1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Decelerate",
              "type": "double?",
              "desc": "減速度 [km/h/s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "StopTime",
              "type": "double?",
              "desc": "停車時間 [s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Accelerate",
              "type": "double?",
              "desc": "加速度 [km/h/s]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Speed",
              "type": "double?",
              "desc": "加速後の走行速度 [km/h]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Train['TrainKey'].Stop(1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Train",
      "key": "TrainKey",
      "func": "Settrack",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "TrackKey",
          "type": "string",
          "desc": "走行する軌道",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        },
        {
          "name": "Direction",
          "type": "double?",
          "desc": "進行方向 (-1: 対向, 1: 並走)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "TrackKey,Direction"
      ],
      "elem_lower": "train",
      "func_lower": "settrack",
      "syntax1": false,
      "syntax2": true,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "走行する軌道",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Direction",
              "type": "double?",
              "desc": "進行方向 (-1: 対向, 1: 並走)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Settrack('string_test_value',1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "走行する軌道",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Direction",
              "type": "double?",
              "desc": "進行方向 (-1: 対向, 1: 並走)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Train['TrainKey'].Settrack('string_test_value',1.0);"
        },
        {
          "args": [
            {
              "name": "TrackKey",
              "type": "string",
              "desc": "走行する軌道",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            },
            {
              "name": "Direction",
              "type": "double?",
              "desc": "進行方向 (-1: 対向, 1: 並走)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Train['TrainKey'].Settrack('string_test_value',1.0);"
        }
      ]
    },
    {
      "elem": "Legacy",
      "func": "Fog",
      "deprecated": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "Fogstart",
          "type": "double?",
          "desc": "視界が100%の距離 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "Fogend",
          "type": "double?",
          "desc": "視界が0%になる距離 [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "red",
          "type": "double?",
          "desc": "赤成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "green",
          "type": "double?",
          "desc": "緑成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "blue",
          "type": "double?",
          "desc": "青成分 (0 ~ 1)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "Fogstart,Fogend,red,green,blue"
      ],
      "elem_lower": "legacy",
      "func_lower": "fog",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "Fogstart",
              "type": "double?",
              "desc": "視界が100%の距離 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Fogend",
              "type": "double?",
              "desc": "視界が0%になる距離 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Fog(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Fogstart",
              "type": "double?",
              "desc": "視界が100%の距離 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Fogend",
              "type": "double?",
              "desc": "視界が0%になる距離 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Fog(1.0,1.0,1.0,1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "Fogstart",
              "type": "double?",
              "desc": "視界が100%の距離 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "Fogend",
              "type": "double?",
              "desc": "視界が0%になる距離 [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "red",
              "type": "double?",
              "desc": "赤成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "green",
              "type": "double?",
              "desc": "緑成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "blue",
              "type": "double?",
              "desc": "青成分 (0 ~ 1)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Legacy.Fog(1.0,1.0,1.0,1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Legacy",
      "func": "Curve",
      "deprecated": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "radius",
          "type": "double?",
          "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": false,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        },
        {
          "name": "cant",
          "type": "double?",
          "desc": "カント [m]",
          "syntax_for_test": "1.0",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "radius,cant"
      ],
      "elem_lower": "legacy",
      "func_lower": "curve",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Curve(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Curve(1.0,1.0);"
        },
        {
          "args": [
            {
              "name": "radius",
              "type": "double?",
              "desc": "曲線半径 [m] (正: 右曲線, 負: 左曲線)",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": false,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            },
            {
              "name": "cant",
              "type": "double?",
              "desc": "カント [m]",
              "syntax_for_test": "1.0",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Legacy.Curve(1.0,1.0);"
        }
      ]
    },
    {
      "elem": "Legacy",
      "func": "Pitch",
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "deprecated": true,
      "args": [
        {
          "name": "rate",
          "type": "double?",
          "desc": "勾配 [‰]",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "rate"
      ],
      "elem_lower": "legacy",
      "func_lower": "pitch",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "rate",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Pitch(1.0);"
        },
        {
          "args": [
            {
              "name": "rate",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Pitch(1.0);"
        },
        {
          "args": [
            {
              "name": "rate",
              "type": "double?",
              "desc": "勾配 [‰]",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Legacy.Pitch(1.0);"
        }
      ]
    },
    {
      "elem": "Legacy",
      "func": "Turn",
      "deprecated": true,
      "versions": [
        "2.02",
        "2.00",
        "1.00"
      ],
      "args": [
        {
          "name": "slope",
          "type": "double?",
          "desc": "傾き(+: 右, -: 左)",
          "syntax_for_test": "1.0",
          "opt": true,
          "last": true,
          "test_value_map_grammar": "1.0",
          "test_value_map_grammar_non_quote": "1.0",
          "test_value_csharp": "1.0"
        }
      ],
      "argPatterns": [
        "slope"
      ],
      "elem_lower": "legacy",
      "func_lower": "turn",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": false,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "slope",
              "type": "double?",
              "desc": "傾き(+: 右, -: 左)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Turn(1.0);"
        },
        {
          "args": [
            {
              "name": "slope",
              "type": "double?",
              "desc": "傾き(+: 右, -: 左)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Legacy.Turn(1.0);"
        },
        {
          "args": [
            {
              "name": "slope",
              "type": "double?",
              "desc": "傾き(+: 右, -: 左)",
              "syntax_for_test": "1.0",
              "opt": true,
              "last": true,
              "test_value_map_grammar": "1.0",
              "test_value_map_grammar_non_quote": "1.0",
              "test_value_csharp": "1.0"
            }
          ],
          "version": "1.00",
          "useV1Parser": true,
          "useV2Parser": false,
          "syntax_for_test": "Legacy.Turn(1.0);"
        }
      ]
    },
    {
      "elem": "Include",
      "skip_test": true,
      "versions": [
        "2.02",
        "2.00"
      ],
      "args": [
        {
          "name": "FilePath",
          "type": "string",
          "desc": "挿入するMapファイルへの相対パス",
          "syntax_for_test": "'string_test_value'",
          "opt": false,
          "last": true,
          "test_value_map_grammar": "'string_test_value'",
          "test_value_map_grammar_non_quote": "string_test_value",
          "test_value_csharp": "\"string_test_value\""
        }
      ],
      "argPatterns": [
        "FilePath"
      ],
      "elem_lower": "include",
      "syntax1": true,
      "syntax2": false,
      "syntax3": false,
      "nofunc": true,
      "noarg": false,
      "argPattern": [
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "挿入するMapファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.02",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Include 'string_test_value';"
        },
        {
          "args": [
            {
              "name": "FilePath",
              "type": "string",
              "desc": "挿入するMapファイルへの相対パス",
              "syntax_for_test": "'string_test_value'",
              "opt": false,
              "last": true,
              "test_value_map_grammar": "'string_test_value'",
              "test_value_map_grammar_non_quote": "string_test_value",
              "test_value_csharp": "\"string_test_value\""
            }
          ],
          "version": "2.00",
          "useV1Parser": false,
          "useV2Parser": true,
          "syntax_for_test": "Include 'string_test_value';"
        }
      ]
    }
  ],
  "elems": [
    "Curve",
    "Gauge",
    "Gradient",
    "Track",
    "Structure",
    "Repeater",
    "Background",
    "Station",
    "Section",
    "Signal",
    "Speedlimit",
    "Beacon",
    "Pretrain",
    "Light",
    "Fog",
    "Drawdistance",
    "Cabilluminance",
    "Irregularity",
    "Adhesion",
    "Sound",
    "Sound3d",
    "Rollingnoise",
    "Flangenoise",
    "Jointnoise",
    "Train",
    "Legacy",
    "Include"
  ],
  "subElems": [
    "X",
    "Y",
    "Cant"
  ],
  "funcs": [
    "Setgauge",
    "Set",
    "Gauge",
    "Setcenter",
    "Setfunction",
    "Begintransition",
    "Begin",
    "Begincircular",
    "End",
    "Interpolate",
    "Change",
    "Beginconst",
    "Position",
    "Cant",
    "Load",
    "Put",
    "Put0",
    "Putbetween",
    "Begin0",
    "Beginnew",
    "Setspeedlimit",
    "Speedlimit",
    "Setsignal",
    "Pass",
    "Ambient",
    "Diffuse",
    "Direction",
    "Play",
    "Add",
    "Enable",
    "Stop",
    "Settrack",
    "Fog",
    "Curve",
    "Pitch",
    "Turn"
  ]
}